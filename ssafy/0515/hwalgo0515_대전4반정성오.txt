package online;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.Queue;
import java.util.StringTokenizer;


public class Mun_ì¹ì¦ {
	static int n, m;
	static int[][] arr;
	static boolean[][] visited;
	static int[] di = {-1,1,0,0};
	static int[] dj = {0,0,-1,1};
	static ArrayList<point> al;
	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		String l1 = br.readLine();
		n = Integer.parseInt(l1.split(" ")[0]);
		m = Integer.parseInt(l1.split(" ")[1]);
		arr = new int[n][m];
		al = new ArrayList<>();
		int cnt = 0;
		int pre_cnt = 0;
		int time = 0;
		for(int i=0; i<n; i++) {
			StringTokenizer st = new StringTokenizer(br.readLine());
			for(int j=0; j<m; j++) {
				arr[i][j] = Integer.parseInt(st.nextToken());
				if(arr[i][j] ==1) {
					al.add(new point(i,j));
				}
			}
		}
		pre_cnt = al.size();
		cnt = al.size();
		// ìë ¥ ë°ê¸° ìë£
		while(true) {
			if(cnt == 0) {
				break;
			}
			visited = new boolean[n][m];
			bfs(0,0);
					
			visited = new boolean[n][m];
			for(int i=0; i<al.size(); i++) {
				point p = al.get(i);
				if(!visited[p.x][p.y]) {
					bfs2(p.x,p.y);
				}
			}
			pre_cnt = al.size();
			al = new ArrayList<>();
			for(int i=0; i<n;i++) {
				for(int j=0; j<m; j++) {
					if(arr[i][j] == 1) {
						al.add(new point(i,j));
					}
					//System.out.print(arr[i][j] + " ");
				}//System.out.println();
			}
			cnt = al.size();
			time++;
			//System.out.println("===============");
		}
		System.out.println(time);
		System.out.println(pre_cnt);
	}
	static void bfs(int si, int sj) {
		Queue<point> q = new LinkedList<>();
		q.add(new point(si, sj));
		visited[si][sj] = true;
		arr[si][sj] = -1;
		while(!q.isEmpty()) {
			point p = q.poll();
			for(int k=0; k<4; k++) {
				int ni = p.x+di[k];
				int nj = p.y+dj[k];
				if(ni>=0 && ni<n && nj>=0 && nj<m) {
					if(!visited[ni][nj]&& arr[ni][nj] <= 0 ) {
						arr[ni][nj] = -1;
						q.add(new point(ni,nj));
						visited[ni][nj] = true;
					}
				}
			}
		}
	}
	static void bfs2(int si, int sj) {
		Queue<point> q = new LinkedList<>();
		q.add(new point(si,sj));
		visited[si][sj] = true;
		while(!q.isEmpty()) {
			point p = q.poll();
			for(int k=0; k<4; k++) {
				int ni= p.x + di[k];
				int nj = p.y+dj[k];
				if(ni>=0 && ni<n && nj>=0 && nj<m) {
					if(!visited[ni][nj] ) {
						if(arr[ni][nj] ==-1) {
							arr[p.x][p.y]= -1;
						}else if(arr[ni][nj] == 1) {
							q.add(new point(ni,nj));
							visited[ni][nj] = true;
						}
					}
				}
			}
		}
	}
	static class point{
		int x, y;
		public point(int x, int y) {
			super();
			this.x = x;
			this.y = y;
		}
	}
}
